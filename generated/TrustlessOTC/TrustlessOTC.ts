// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OfferCancelled extends ethereum.Event {
  get params(): OfferCancelled__Params {
    return new OfferCancelled__Params(this);
  }
}

export class OfferCancelled__Params {
  _event: OfferCancelled;

  constructor(event: OfferCancelled) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferCreated extends ethereum.Event {
  get params(): OfferCreated__Params {
    return new OfferCreated__Params(this);
  }
}

export class OfferCreated__Params {
  _event: OfferCreated;

  constructor(event: OfferCreated) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferTaken extends ethereum.Event {
  get params(): OfferTaken__Params {
    return new OfferTaken__Params(this);
  }
}

export class OfferTaken__Params {
  _event: OfferTaken;

  constructor(event: OfferTaken) {
    this._event = event;
  }

  get tradeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TrustlessOTC__getOfferDetailsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: boolean;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: boolean,
    value7: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  get_tokenFrom(): Address {
    return this.value0;
  }

  get_tokenTo(): Address {
    return this.value1;
  }

  get_amountFrom(): BigInt {
    return this.value2;
  }

  get_amountTo(): BigInt {
    return this.value3;
  }

  get_creator(): Address {
    return this.value4;
  }

  get_fee(): BigInt {
    return this.value5;
  }

  get_active(): boolean {
    return this.value6;
  }

  get_completed(): boolean {
    return this.value7;
  }
}

export class TrustlessOTC__offersResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: boolean;
  value7: boolean;
  value8: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: boolean,
    value7: boolean,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getTokenFrom(): Address {
    return this.value0;
  }

  getTokenTo(): Address {
    return this.value1;
  }

  getAmountFrom(): BigInt {
    return this.value2;
  }

  getAmountTo(): BigInt {
    return this.value3;
  }

  getCreator(): Address {
    return this.value4;
  }

  getOptionalTaker(): Address {
    return this.value5;
  }

  getActive(): boolean {
    return this.value6;
  }

  getCompleted(): boolean {
    return this.value7;
  }

  getTradeID(): BigInt {
    return this.value8;
  }
}

export class TrustlessOTC extends ethereum.SmartContract {
  static bind(address: Address): TrustlessOTC {
    return new TrustlessOTC("TrustlessOTC", address);
  }

  balanceTracker(param0: Address): BigInt {
    let result = super.call(
      "balanceTracker",
      "balanceTracker(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_balanceTracker(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceTracker",
      "balanceTracker(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelTrade(tradeID: BigInt): boolean {
    let result = super.call("cancelTrade", "cancelTrade(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tradeID),
    ]);

    return result[0].toBoolean();
  }

  try_cancelTrade(tradeID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancelTrade", "cancelTrade(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tradeID),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeBasisPoints(): BigInt {
    let result = super.call("feeBasisPoints", "feeBasisPoints():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeBasisPoints",
      "feeBasisPoints():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeTracker(param0: Address): BigInt {
    let result = super.call("feeTracker", "feeTracker(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_feeTracker(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeTracker", "feeTracker(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOfferDetails(tradeID: BigInt): TrustlessOTC__getOfferDetailsResult {
    let result = super.call(
      "getOfferDetails",
      "getOfferDetails(uint256):(address,address,uint256,uint256,address,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(tradeID)],
    );

    return new TrustlessOTC__getOfferDetailsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean(),
    );
  }

  try_getOfferDetails(
    tradeID: BigInt,
  ): ethereum.CallResult<TrustlessOTC__getOfferDetailsResult> {
    let result = super.tryCall(
      "getOfferDetails",
      "getOfferDetails(uint256):(address,address,uint256,uint256,address,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(tradeID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustlessOTC__getOfferDetailsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean(),
      ),
    );
  }

  getUserTrades(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserTrades",
      "getUserTrades(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserTrades(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserTrades",
      "getUserTrades(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offers(param0: BigInt): TrustlessOTC__offersResult {
    let result = super.call(
      "offers",
      "offers(uint256):(address,address,uint256,uint256,address,address,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new TrustlessOTC__offersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBigInt(),
    );
  }

  try_offers(param0: BigInt): ethereum.CallResult<TrustlessOTC__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(uint256):(address,address,uint256,uint256,address,address,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TrustlessOTC__offersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tradeTracker(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "tradeTracker",
      "tradeTracker(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_tradeTracker(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradeTracker",
      "tradeTracker(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelTradeCall extends ethereum.Call {
  get inputs(): CancelTradeCall__Inputs {
    return new CancelTradeCall__Inputs(this);
  }

  get outputs(): CancelTradeCall__Outputs {
    return new CancelTradeCall__Outputs(this);
  }
}

export class CancelTradeCall__Inputs {
  _call: CancelTradeCall;

  constructor(call: CancelTradeCall) {
    this._call = call;
  }

  get tradeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelTradeCall__Outputs {
  _call: CancelTradeCall;

  constructor(call: CancelTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class InitiateTradeCall extends ethereum.Call {
  get inputs(): InitiateTradeCall__Inputs {
    return new InitiateTradeCall__Inputs(this);
  }

  get outputs(): InitiateTradeCall__Outputs {
    return new InitiateTradeCall__Outputs(this);
  }
}

export class InitiateTradeCall__Inputs {
  _call: InitiateTradeCall;

  constructor(call: InitiateTradeCall) {
    this._call = call;
  }

  get _tokenFrom(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountFrom(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amountTo(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _optionalTaker(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitiateTradeCall__Outputs {
  _call: InitiateTradeCall;

  constructor(call: InitiateTradeCall) {
    this._call = call;
  }

  get newTradeID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ReclaimTokenCall extends ethereum.Call {
  get inputs(): ReclaimTokenCall__Inputs {
    return new ReclaimTokenCall__Inputs(this);
  }

  get outputs(): ReclaimTokenCall__Outputs {
    return new ReclaimTokenCall__Outputs(this);
  }
}

export class ReclaimTokenCall__Inputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReclaimTokenCall__Outputs {
  _call: ReclaimTokenCall;

  constructor(call: ReclaimTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TakeCall extends ethereum.Call {
  get inputs(): TakeCall__Inputs {
    return new TakeCall__Inputs(this);
  }

  get outputs(): TakeCall__Outputs {
    return new TakeCall__Outputs(this);
  }
}

export class TakeCall__Inputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get tradeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TakeCall__Outputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
